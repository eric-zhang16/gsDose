% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gsBoundary.R
\name{gsBoundary}
\alias{gsBoundary}
\title{Calculate efficacy boundary for inverse normal combination test}
\usage{
gsBoundary(w, h, d, d2, s, planD, alpha, sf, sfpar = NULL, bt)
}
\arguments{
\item{w}{A matrix of pre-specified weights for the incremental test statistics up to current stage based on cohort 1. Each row contains the weights used at the corresponding stage}

\item{h}{A matrix of pre-specified weights for cohort 1 and cohort 2 up to current stage.}

\item{d}{A vector of observed number of events from both cohorts across stages (up to current stage)}

\item{d2}{A vector of observed number of events from cohort 2 across stages (up to current stage)}

\item{s}{The planned total number of stages for efficacy testing (excluding dose selection stage)}

\item{planD}{The planned total number of events from cohort 2 at FA.}

\item{alpha}{The assigned alpha level}

\item{sf}{A spending function. 'OF' for O'Brien-Fleming spending function. 'HSD' for Hwang-Shih-DeCani spending function}

\item{sfpar}{It specifies the parameter for Hwang-Shih-DeCani spending function . It will be ignored if sfu='OBF'}

\item{bt}{Bound type. bt='upper' for efficacy upper bound. bt='lower' for efficacy lower bound.}
}
\value{
The efficacy boundaries up to current stage
}
\description{
For an intersection hypothesis, calculate the efficacy boundary at current stage for the inverse normal combination test. Currently, the function use an alpha spending function to allocate alpha across stages
}
\examples{
# 3 doses at dose selection followed with 4 stages for the selected dose
# calculate boundary at 1st stage

w <- 1
h <- c(sqrt(60/700),sqrt(1-60/700))
d <- c(250)
d2 <- c(230)
s <- 4
planD <- 520
alpha <- 0.025
gsBoundary(w,h,d,d2,s,planD,alpha,sf='OF',bt='upper')

# calculate boundary at 2nd stage
w <- matrix(c(1,        0,
             sqrt(2/3), sqrt(1/3)),nrow = 2, ncol = 2, byrow = TRUE)
h <- matrix(c(sqrt(60/700), sqrt(1-60/700),
             sqrt(60/700),  sqrt(1-60/700)),nrow = 2, ncol = 2, byrow = TRUE)

d <- c(250,350)
d2 <- c(230,325)
s <- 4
planD <- 520
alpha <- 0.025
gsBoundary(w,h,d,d2,s,planD,alpha,sf='OF',bt='upper')

# calculate boundary at 3rd stage
w <- matrix(c(1,        0,         0,
              sqrt(2/3),sqrt(1/3), 0,
              sqrt(2/4),sqrt(1/4), sqrt(1/4)),nrow = 3, ncol = 3, byrow = TRUE)
h <- matrix(c(sqrt(60/700), sqrt(1-60/700),
              sqrt(60/700), sqrt(1-60/700),
              sqrt(60/700), sqrt(1-60/700)),nrow = 3, ncol = 2, byrow = TRUE)

d <- c(250,350,459)
d2 <- c(230,325,430)
s <- 4
planD <- 520
alpha <- 0.025
gsBoundary(w,h,d,d2,s,planD,alpha,sf='OF',bt='upper')

# calculate boundary at 4th stage
w <- matrix(c(1,        0,         0,         0,
              sqrt(2/3),sqrt(1/3), 0,         0,
              sqrt(2/4),sqrt(1/4), sqrt(1/4), 0,
              sqrt(2/5),sqrt(1/5), sqrt(1/5), sqrt(1/5)), nrow = 4, ncol = 4, byrow = TRUE)
h <- matrix(c(sqrt(60/700), sqrt(1-60/700),
              sqrt(60/700), sqrt(1-60/700),
              sqrt(60/700), sqrt(1-60/700),
              sqrt(60/700), sqrt(1-60/700)),nrow = 4, ncol = 2, byrow = TRUE)

d <- c(250,350,459,530)
d2 <- c(230,325,430,500)
s <- 4
planD <- 520
alpha <- 0.025
gsBoundary(w,h,d,d2,s,planD,alpha,sf='OF',bt='upper')

# Add futility bounds
gsBoundary(w,h,d,d2,s,planD,alpha=1-alpha,sf='HSD',sfpar=-6,bt='lower')

}
